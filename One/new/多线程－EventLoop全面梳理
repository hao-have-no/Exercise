CPU:计算机的核心,工厂
进程：车间（ＪＳ的工厂电力每次支持一个车间工作），代表ｃｐｕ处理单个任务(进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）)
线程:车间工人,线程是cpu调度的最小单位

浏览器是多线程的（多ｔａｂ）
我们在浏览器上看到的图像是16.7ms来进行渲染的

浏览器包含了哪些进程
1.主进程
协调控制其他子进程（创建、销毁）,浏览器界面显示，用户交互，前进、后退、收藏
将渲染进程得到的内存中的Bitmap，绘制到用户界面上,处理不可见操作，网络请求，文件访问等

2.第三方插件进程
每种类型的插件对应一个进程，仅当使用该插件时才创建

3.GPU进程
用于3D绘制等

4.渲染进程，就是我们说的浏览器内核
负责页面渲染，脚本执行，事件处理等，每个tab页一个渲染进程

浏览器内核（渲染进程）
对于渲染进程来说，它当然也是多线程的了，接下来我们来看一下渲染进程包含哪些线程。

１．GUI渲染线程
负责渲染页面，布局和绘制
页面需要重绘和回流时，该线程就会执行
与js引擎线程互斥，防止渲染结果不可预期

２．JS引擎线程
负责处理解析和执行javascript脚本程序
只有一个JS引擎线程（单线程）
与GUI渲染线程互斥，防止渲染结果不可预期

３．事件触发线程
用来控制事件循环（鼠标点击、setTimeout、ajax等）
当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中

４．定时触发器线程
setInterval与setTimeout所在的线程
定时任务并不是由JS引擎计时的，是由定时触发线程来计时的
计时完毕后，通知事件触发线程

５．异步http请求线程
浏览器有一个单独的线程用于处理AJAX请求
当请求完成时，若有回调函数，通知事件触发线程

为什么 javascript 是单线程的？
多线程的复杂性，多线程操作需要加锁，编码的复杂性会增高。
而且，如果同时操作 DOM ，在多线程不加锁的情况下，最终会导致 DOM 渲染的结果不可预期。

从 Event Loop 看 JS 的运行机制：
JS 分为同步任务和异步任务
同步任务都在JS引擎线程上执行，形成一个执行栈
事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中
执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行
总结一下：

JS引擎线程只执行执行栈中的事件
执行栈中的代码执行完毕，就会读取事件队列中的事件
事件队列中的回调事件，是由各自线程插入到事件队列中的
如此循环

宏任务、微任务
JS引擎线程和GUI渲染线程是互斥的关系，浏览器为了能够使宏任务和DOM任务有序的进行，会在一个宏任务执行结果后，在下一个宏任务执行前，GUI渲染线程开始工作，对页面进行渲染。

执行一个宏任务（栈中没有就从事件队列中获取）
执行过程中如果遇到微任务，就将它添加到微任务的任务队列中
宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染
渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）
主代码块，setTimeout，setInterval等，都属于宏任务
Promise，process.nextTick等，属于微任务。

总结

执行一个宏任务（栈中没有就从事件队列中获取）
执行过程中如果遇到微任务，就将它添加到微任务的任务队列中
宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染
渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）
