Ubuntu命令:
ｃｔｒｌ+shift+n 打开新的终端
ctrl+shift+t 打开新的标签页
ctrl+菜单+d  所有页面最小化


git：错误提交后退回
git log 获取提交记录
git reset --hard commit-id(提交记录中想要回退到哪次提交的版本号)





----------------------------------------------------------------------------------------------------------------------
菜单键完成递归，Ａｒｒａｙ.filter的思路，完成树形菜单的穿透
详情见ｓｕａｎfa,解释一下四；思路
１．ａｒｒａｙ．ｆｉｌｔｅｒ寻找满足条件的值，在对象数组判断时，会判断到最低端，然后找到对应的值，然后一层层的再退出来，完成对整个对象体系
的筛选，而这个过程中会因为递归的存在行程若干不等长的对象，所以最终的结果回事递归层次的数目

２．对于ｄｉｒｅｃｔｉｖｅ中的ｓｃｏｐｅ的用法，"&"表示的是子组件绑定父组件中的任意的方法或者属性．在子组件操作时同时会引发父组件相对应
的变化，结果如点击树形菜单中低端节点，会调用层级中定义的相同方法，对每个层级进行判断，改变状态，最终形成对应的连带状态，如下图简视．
   ＋基础数据服务
        ＋高血压分析
            －关联分析
            统计分析

３．indeterminate为ｒａｄｉｏ和ｃｈｅｃｋｂｏｘ中间状态提供一个显示状态


４．对于依赖注入和ｆａｃｔｏｒｙ的方法
ｆａｃｔｏｒｙ相当于是计算函数，ｓｅｒｉｃｅ是外部请求的集合
ｐｒｏｖｉｄｅｒ更加确切，用于等待阶段，提供ｆａｃｔｏｒｙ方法
mainApp.config(function($provide) {
   $provide.provider('MathService', function() {
      this.$get = function() {
         var factory = {};

         factory.multiply = function(a, b) {
            return a * b;
         }
         return factory;
      };
   });
});



在使用的时候直接可以在ｓｅｒｖｉｃｅ中直接引入或者在ｃｏｎｔｒｏｌｌｅｒ中直接引入
只不过为了避免耦合，建议在ｓｅｒｖｉｃｅ中再定义一层．



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
科研３：
(1)录入功能：通过缓存的形式对菜单及所有状态进行处理，同时根据菜单取值渲染当前区域


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
统一视图：
（１）对数据的合理处理，分割，行程各个组件
（２）视图详情页：
１．坐标的导航与与右边的详情区，通过左边传递的ｉｄ值来找到右边对应的值，然后计算出距离滑动到当前区域．另外何须图可以根据下面的结实来判断
２．左边的导航和右边的详情区之间，左侧菜单栏点击或者切换标题栏．触发
ｓｈｏｗＣｈｉｌｄ来更新导航条,并且左右两侧共享ａｐｉ本地数据源来同步滚动，通过渲染关键的标识（ｅｇ：targetTemplate来控制区域的显示）来控制页面的数据
视图的显隐性．
３．通过ｅｍｉｔ和ｏｎ方法来进行组件之间的通信，通过ｔｉｍｏｕｔ来手动加速数据的刷新
４．ｅｇ：左边菜单栏－＞标签栏－＞刷新数据
ｓｈｏｗＣｈｉｌｄ->$emit('doRefresh'->$on('doRefresh'->getData
父类ａｃｔｉｖｅ改变－＞刷新导航栏子类－＞出发ｒｅｆｌｅｓｈ方法－＞获取数据源

纪录一：右边的联动促发不了左边菜单的数据请求，判断
１．刷新的事件触发，ｅｇ：ｄｏｆｒｅｓｈ（刷新视图数据）和赋值当前标签值是否正确（对应的视图区域及标签值是否选中显示）



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
ｕｎｄｅｒｆｉｎｅｄ：在判断对象是否有值的情况下，在ｔｒｕｅ的情况下可以返回ｕｎｄｅｒｆｉｎｅｄ，保留原来的值
echarts:在ｏｐｔｉｏｎ数据集中的ｔｏｏｌｔｉｐ配置中定义ｆｏｒｍａｔｔｅｒ参数值，用来显示指定的数据值，这个数据值来源于传入的ｄａｔａ，如果传入的是对象，会去对象中的ｖａｌｕｅ中查询
另外关注每个部分的参数值，比如控制图中块状的数值，改变ｓｅｒｉｅｓ中ｌａｂｅｌ中ｎｏｒｍａｌ中ｓｈｏｗ的值

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
移动端布局方式：
ｆｌｅｘ＋ｗｉｄｔｈ


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
ES6---关注点
１．解构赋值．２．函数rest参数３．箭头函数４．对象的函数，Object.assign．５．ｐｒｏｍｉｓｓ６．ｇｅｎｅｒｏｕｓ
７．ａｓｙｎｃ８．ｃｌａｓｓ９．ｍｏｄｕｌｅｓ

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
当组件与父组件之间进行通信时
1.增加事件监听,$watch数据变化
2.增加事件发布,$bordercast/$emit,$on来进行事件的发布订阅

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
思路分享－－状态值，标记值模仿状态管理，ｐｒｏｍｉｓｅ的使用
（１）定义状态集和修改方法，来控制整个currState（当前数据的状态）的值，减少频繁大面积的更改值操作
$scope.createPatiAbout = {                                    // 创建患者相关
      currState: 'init',                                            // 创建的当前状态
      stateMachine: {                                               // 创建相关的状态机
        'init': {
          create: 'creating'
        },
        'creating': {
          success: 'created',
          failure: 'creatErr',
        },
        'created': {
          evaluate: 'init'
        },
        'creatErr': {
          recreate: 'init'
        }
      },
      stateChange: Utils.changeState(),                              // 更改状态
      newPatiFormEntity: {                                           // 创建全新患者的表单实例
        'brandNewPatiForm': null,                                         // 基本信息表单
        'groupForm': null                                                 // 护理组表单
      }
    }


（２）ｐｒｏｍｉｓｅ使用，在前后端交互时，会接受到意外的返回值，常规的处理无法处理该情况
通过ｐｒｏｍｉｓｓ分装ｈｔｔｐ请求，对请求中的状态值进行判断，然后将判断过后的结果返回，避免在每个请求中都需要对返回值进行判断，减少不必要的代码
this.creatPati = function(param) {
    var deferred = $q.defer()／／ａｎｇｕｌａｒ中定义的ｐｒｏｍｉｓｓ函数封装
    $http.post(`${SYS.url}${param.pInfo.groupId}/patient/create`, param.pInfo).then(function(msg) {
      if (msg.data.status == 'ok') return deferred.resolve(msg.data.data)
    }, function(error) {
      return deferred.reject('创建失败！')
    })

    return deferred.promise
  }


this.getList = function(param) {
    var deferred = $q.defer()

    /**
     * 修正页码， 后台传回的比前台需要的少 1
     * @param {*} data
     */
    var fixListData = function(data) {
      if(data.number>=0) {
       data.number++
      }
    }
    $http.get(`${SYS.url}${param.filterAbout.patiGroup.id}/patient/list?name=${param.filterAbout.patiName}&pid=${param.filterAbout.depId}&page_size=${param.size}&page_number=${param.num}`).then(function(msg) {
      if (msg.data.status == 'ok') {
        fixListData(msg.data.page)
        return deferred.resolve(msg.data.page)
      }
      else if (msg.data.status == 'blank') return deferred.resolve([])
    }, function(error) {
      return deferred.reject('请求出错！')
    })

    return deferred.promise
  }

使用：
APIService.creatPati(param).then(function(msg) {
        // 创建成功
        $scope.createPatiAbout.stateChange('success')
        sessionStorage.setItem('currPati', JSON.stringify(msg))                // 当前操作的患者信息
        sessionStorage.setItem('currInterview', JSON.stringify(msg.interview)) // 存储当前随诊信息
        $scope.totast.mainBody = {                                             // 通知提示语定义
          status: 'ok',
          description: '创建成功！',
          callback: function() {
            createPatiModal.modal("hide")
            // 重写新建患者模态框收起回调事件
            createPatiModal.on('hidden.bs.modal', function(e) {
              location.href = `#/scaleEnter/${msg.pid}/${msg.groupId}/${msg.interview.id}/${msg.interview.crfTemplateId}/0`
            })
          },
          delay: 1000
        }
      }, function(error) {
        // 创建失败
        $scope.createPatiAbout.stateChange('failure')
        $scope.totast.mainBody = {                                  // 通知提示语定义
          status: 'error',
          description: '创建失败，请重试！',
          callback: function() {
            $scope.createPatiAbout.stateChange('recreate')          // 重置状态机
          },
          delay: 2000
        }
      })

---------------------------------------------------------------------------------------------------
使用nginx搭建服务器
1.nginx 启动服务器
2.#ps -ef | grep nginx 找到服务器的主端口
3.kill -quit 12938 关闭主端口

静态服务器资源配置地址:在nginx下的sites-enabled下的default中可以配置静态资源地址

-------------------------------------------------------------------------------------------

jekins/打包发布前端工程
首先确定发布的服务器地址,需不需要走单独的配置文件
不需要:按照原来的方式,在开发的dev.js脚本中修改线上的后台端口就行
需要的话,在env中新建一个指定服务器版本的js脚本,eg:env.server173.js的文件,在其中配置需要用到的项目的后台端口地址.
在fis-conf中,配置server173服务器上线中需要的项目的js打包信息,可以拷贝其他的修改为自己的,记住打包js的时候一定要精确到js文件夹
eg:'system-management/js/*.js'

需要打离线包的话,在restart.sh中修改启动脚本,改为自己的,测试是否有问题.

无问题的话,使用 fis3 release env.server173 /文档/page
----------------------------------------------------------------------------------------

工作3:病例云分析平台重点纪录
1.关于中间和左侧的协同关系,通过workspaceinfo传递当前的值,wholeinfo所有的值来进行左右两侧模版区与显示区的交互.
特殊的是workspaceinfo的data中存放主诉和现病史的数据,用于同步主诉和现病史的关系.

2.左侧与中间部分的关系
(1)中间部分通过点击改变workSpaceInfo的mark值来控制左边菜单区的显示,根据你点击的元素获取该元素的类型与数据源渲染到左边区域
(2)左边选择完成,就会促发保存操作,同时刷新中间区域的值

流程解析(以主诉和现病史为例):
(左中都会出发这个事件---因为公用一份数据源)addQuestion将当前的疾病信息,所在模块,workspaceInfo座位参数,保存左边的区域后,随后促发
addQuestion将选中的问题的数据源拿到放置在左边
addAttr将选中的问题数据源放置在疾病的模块数据中,渲染中间部分.



3.门诊病历部分的嵌套关系
(1):prescription模版中,通过初始化的继承StateMan构造函数来给每个子实例赋值状态管理数组.通过对状态的改变来触发UI的渲染

(2):页面缓存,检查.检验的弹框缓存来实时更新,经操作后产生(检查,中药等模块)的新数据并同步更新对应的模块数据.(中药除外,模版与其他差异性过大)
eg:
 scope.orgDataAbout.rst[mark1].pop();
secondSelected: scope.orgDataAbout.rst.tests

(3)注意大部分的常量是前端维护的模版,(缓存比较多,容易记混)缓存.(同时每个模版中包含这主要的表头信息,补充的表头信息以及添加的其他模版信息)
eg1:modelSelectKey 这个是请求信息常量的存放体,用来请求模版中下拉下列表类型的值信息.
初始化请求数据的时候,根据modelSelectKey来获取每个膜板下的select类型的值并放置在本地常量的缓存中,通过setTempData来更新前端维护的模版中对应的信息

(4)缓存解释(tempModal前端数据模版),后期页面的数据控制由前端模版控制,而缓存用于前后台交互,同时渲染前端模版
-------注意:中药模版是特殊的,主要的模版信息在secondSelectedTable中,中药有两个模版,所以需要特殊对待
-------secondSelectedTable是渲染表头的
-------由于有预制模版,预制模版与缓存进行对应,通过对缓存模版的更新从而改变前端数据模版中的值.
orgDataState:状态管理,页面初始话的时候生成
orgDataAbout:模块数据缓存----同时关联前端模版数据源(eg: secondSelected: scope.orgDataAbout.rst.exams)-----该部分在页面初始的话时候附上所有的值
modelSelectKey:各模版下的select的数据源------同时关联数据模版下select类型的数据源(特殊处理)-----页面初始化的时候生成
一:;(function() {
                // 1. 先请求已保存数据 2.请求每个模块 select 的范围
                fetchOrgData().then(function(data) {
                    var count = 0
                    scope.modelSelectKey.forEach(function(val, ind)

二:function fetchOrgData() {
                scope.orgDataState.state.changeState('fetch')             // 更改当前状态为 fetching
                var params = `?xlPatientId=${$routeParams.xlPatientId}&xlVisitId=${$routeParams.xlVisitId}`
                initSaveMark == 1?params = `${params}&init=${initSaveMark}`:'';
                return $http.get(`${SYS.prescriptUrl}prescribe${params}`).then(function(msg) {
                    if(msg.data.status == 'ok') {
                        initSaveMark++;
                        scope.orgDataState.state.changeState('success')
                        scope.orgDataAbout.rst = msg.data.data
                        scope.wholeInfo['prescription'] = scope.orgDataAbout.rst


viewDetailState:检查弹框的状态关系
viewExamAbout:检查数据缓存
viewTestAbout:检验弹层数据缓存


-----------------------------------------------------------------------------------------

工作2:科研分析平台-src-widget

困难点1:理解组合视图的概念
集中在form.directivehe,group.services,form.services
(1)虚拟菜单,多层级(在当前组件中会出现children属性来存放二级组件)
eg:按钮的是否控制children中各个组件的显示状态,可能是true--->children({type:"按钮",active:true,name:"ss"}),在按钮为true的时候,改变状态值显示
而组件的值改变是将children提出来,放入与当前父级同级的ul中.

(2)组合视图,单个表单多次填写
根据group状态值来判断是否组合视图,


(3)组合主题,多层嵌套,每个嵌套层可能需要组合视图(虚拟菜单+组合视图的应用)


-----------------------------------------------------------------------------------------
工作1:
摆脱原有的json格式影响,可配置化操作界面,由后台传入.
数据格式,返回值类型
item-label--组件名,item_name--组件标识,item_value--组件值,item_type--组件类型,item_option(多选,单选,下拉)---数据源--用于做选择的
详情请看:ag.txt



无*,infi-input-left加    padding-top: 10px;  infi-input-left infi-span-padding
统一给单选多选加    margin-top: 10px;




 //  BasicServices.getData({
        //     'data':JSON.parse(sessionStorage.getItem('diseaseParam')),
        //     'url':SYS.url+$routeParams.type+'/recommendation?'+'class_id='+$routeParams.class_id,
        //     'method':'post'
        // }).then(function success(msg) {
        //     var recordId=msg.id;
        //     var id=msg.data.recom_scheme[0].uuid;
        //
        //    var diseasePlanDetail= window.open('_blank');
        //    diseasePlanDetail.location='#/disease-plan-detail/'+$routeParams.pati_id+'/'+$routeParams.pati_visit_id+'/'+recordId
        //    +'/'+id+'/'+$routeParams.class_id+'/'+$routeParams.type;
        //
        //  })




----------------------------------------------------交接部分及相关纪录----------------------------------------------------------------------------------
工作开发过程注意要点
在整个模型操作过程中所有的数据变化都在￥ｓｃｏｐｅ中保存.

１．ｅｎｖ中纪录这环境的后端接口和各工程的依赖关系
２．ｆｉｓ－ｃｏｎｆ记录着每个项目模块的打包信息
３．每个项目中最主要的部分是ｃｏｎｔｒｏｌｌｅｒ和ｓｅｒｖｉｃｅ，ｃｏｎｔｒｏｌｌｅｒ中处理业务，ｓｅｒｖｉｃｅ中处理交互，基本上公共的组件都在ｓｒｃ中放着，需要时可以引用．
４．item in overallData track by $index　生成独立唯一的ｉｄ，避免重复
５．表格数据展示时，数据头部的信息可能存放在本地的ｊｓｏｎ文件中，而实际的数据存放在其他地方（前后端交互拿取）
６．进行表格添加新的行时，根据提前预制的模版，往当前的数据组中添加模版进行数据的填写，第四条中的$ｉｎｄｅｘ确保改变对应的值
７．在穿透的到详情的时候，具体的出发操作是在infi-table columns组件中的btnCallback方法定义的,使用时在ｃｏｎｔｒｏｌｌｅｒ定义相关的方法就可以进行操作,
eg:$scope.btnCallback = function(opt,type)
８．ng-class实际用法，对于业务进行判断格式ng-class="{true:'col-md-12',false:'col-md-4'}[opt.children.length >0 ]"
９.获取ｕｒｌ的两种方法:
url:backApi['diseases-plan-src'].url//在ｅｎｖ总体的项目文件中定义
url:'http://47.92.143.156:23110/portrait/'//直接在项目中定义
１０．angular.module('infi-basic').controller('DetailsController', ['$scope', 'SYS', 'DetailsService', '$routeParams',
'CheckDeviceService', '$location', function ($scope, SYS, DetailsService, $routeParams, CheckDeviceService, $location) {
DetailsController－－控制器名字
$scope－－－当前作用域，与ｖｉｅｗ进行数据挂载的中间件
ＳＹＳ我们声明的常见参数值
ｒｏｕｔｅｒＰａｒａｍｓ－－路由携带的参数值
CheckDeviceService－－我们生命的后台交互方法
$location－－－路径值集合
１１．两种表格类型的展示组件
（１）自己定义表格组件，跳转的页码部分使用组件－－uib-pagination－－需要拿到数据的条数等，数据的具体展示有个人承担，在提供的切换页数接口上覆盖自己的方法
（２）使用定义好的组件，infi-table－－将获取的表格表头，数据集合全部传入，在提供的切换页数接口上覆盖自己的方法
（３）view-table－－将获取的表格表头，数据集合全部传入，在提供的切换页数接口上覆盖自己的方法
１２．指令跳转新的页面，跳转到的新的页面，所有的模型操作和交互由原来的控制文件提供
//出院记录模态框
angular.module('infi-basic').directive('dischargeRecord', [function () {
    return {
        restrict: 'A',
        templateUrl: 'html/tpl/discharge.record.html'
    }
}]);

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

业务及数据流程概括：
在ｃｏｎｔｒｏｌｌｅｒ中进行业务数据的初始化．
有穿透的业务，在拿到业务的值后，根据需要向后台进行请求，触发相关事件．
根据后续操作，结合标识符进行相同类型的数据处理及页面部分的显隐性处理．

健康画像业务处理－异常项目－异常解读业务操作解析ｅｇ：
在首次操作时ｉｎｉｔ后拿到相关信息，根据具体的标识符，将数据放置在检查和检验之中．
ng-repeat="exam in exceptionProject.data.examInfo"－－－循环输入到对应的视图部分
ｄｅｔａｉｌｓ．ｃｏｎｔｒｏｌｌｅｒ的１８６行．在初始话的时候会进行判断，如果有检查事件的值，将会将检查的第一个数据传入queryClass方法，
获取异常解读数据，否则将获取检验第一条的异常解读．
ng-click="queryClass(exam,'exam')"根据异常项目的视图，获取对应的异常解读置于对应的视图中



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
交接部分－－－－业务不复杂
１．宁夏大屏系统，主要集中在对数据的操作上
２．护理不良事件，主要集中在数据的筛选和表格形式的数据展示，注意联动情况和ｎｇ－ｍｏｄｅｌ的绑定关系，图表展示格式对数据的处理及展示
３．picc延续护理，主要是ｔａｂ页切换时的数据处理
４．武汉健康画像，主要是身体图的引用及相关数据联动
５．多科就诊，主要是数据图表数据的处理
６．疾病推荐方案，主要是筛选数据,治疗方案的穿透及相关组件的引用
７．肾内科日表表统计，主要是数据的穿透显示
８．地坛phpcms，主要是根据系统关联相关项目地址
９．



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ａｐｐ．ｊｓ封装了最基础的入口文件

在路由跳转成功后，挂接对应的ｃｏｎｔｒｏｌｌｅｒ，ｓｅｒｖｉｃｅ及文件中所有到自定义ｄｉｒｅｃｔｉｖｅ指令；
ｃｏｎｔｒｏｌｌｅｒ中我们可以对相关的页面进行初始化及相关操作，也可以生成ｗａｔｃｈ对状态进行监控

作用域是工作的上下文环境，存放应用模型及视图相关的回调行为，可以观察表达式及传播事件，以层次化的结构与ｄｏｍ记性进行对应．
！！指令和控制器只能通过作用域链接.

作用域传播事件：
广播（$broadcast）到子作用域或者向上传播到父作用（$emit）域中（当前的层级作用域也会受到影响）

获取ＤＯＭ作用域：
作用域是与视图相关联的，我们可以在debug的时候通过api获取绑定到视图的作用域。
通过$0便可获得当前选中的DOM元素。
通过angular.element($0).scope()或者$scope可以获得当前元素对应的作用域。

作用域的生命周期
1. 创建 - 更作用域会在应用启动时通过注入器创建并注入。在模板连接阶段，一些指令会创建自己的作用域。
2. 注册观察者 - 在模板连接阶段，将会注册作用域的监听器。这也监听器被用来识别模型状态改变并更新视图。
3. 模型状态改变 - 更新模型状态必须发生在scope.$apply方法中才会被观察到。
4. 观察模型状态 - 在$apply结束阶段，angular会从根作用域执行$digest过程并扩散到子作用域。在这个过程中被观察的表达式或方法会检查模型状态是否变更及执行更新。
5. 销毁作用域，当不再需要子作用域时，通过scope.$destroy()销毁作用域，回收资源。


$scope.$apply();模型改变需要重绘视图


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－



angular:directive()自定义组件

angular:$evel,$parse,$compile
相关知识点：$scope中储存的是当前controller中的上下文，当删除controller后，当前文中的上下级关系就存放在$rootscope中
var getter=$parse('user.name')
var setter=getter.assign.
var context={user:{name:'ag'}}
var locals={user:{name:'la'}}


$evel继承了$parse.
$parse,当前控制器解析上下文时，告诉当前服务解析的地址是哪里.
getter(context).toEqual('angular')===>$parse('user.name')(context);
获取当前表达式user.name,获取上下文对象{user:{name:'ag'}},从上下文中寻找表达式，拿到对应的值ａｇ；

$compile将模版进行变更，里面接入的ｄｏｍ．
$new($scope),表示声明的新对象有新的的作用域



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
ｎｇ－ｍｏｄａｌ用语存储带有业务作用的数据，来进行从常规的业务操作

 <link rel="import" href="tpl/event.level.details.html?__inline">
 在视图中采用嵌套的方式,ｃｏｎｔｒｏｌｌｌｅｒ和service是可以使用的，享用与主页面一样全责的业务处理.

 ｅｇ：admission-regist-src中的ｖｉｅｗ(出入院登记)
 返回来的值进行计算时，直接对原有的值进行复制操作，

 angular.forEach($scope.wardSearchObj.filterRst, function(val, ind) {
         val.otherValue = val.totalValue - val.singleValue
       })
－－－－－这是在上面请求后台拿到值后进行取值计算操作，并在原有的对象中附加ｏｔｈｅｒＶａｌｕｅ属性

data: [
                {value: $scope.wardSearchObj.filterRst[1].singleValue, name: "当前病区"},
                {value: $scope.wardSearchObj.filterRst[1].otherValue, name: "其他病区"}
              ]
－－－－－－－前面的计算中对象中已经新添的相关的属性，可以在后续业务中进行使用




－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
北京－－－－郑州
９３　　硬座　　
１６３　卧铺　这个　　　２１：１０　－－－　３：０３　　　２１．１６－－－３．３３　　
２１６　动车

北京－－－－武汉
２６１．５　　卧铺　　　２１：１０－－－０７：４８　　　２１：１６－－－０８：２６　　２２：００－－－１０：２２　　　


郑州－－－武昌　　　　　　
硬座　７５　　这个　　　０４：０４－－－０８：２６　　　０４：４９－－－０９：３５　
卧铺　１３３　
高铁　２４４


sudo apt-get purge 软件名称
sudo apt-get autoremove 清除软件的残余部分

绿色,



