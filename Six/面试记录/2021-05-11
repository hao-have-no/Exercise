### 节流和防抖分别是什么，在什么场景下使用？手写防抖和节流
1.　防抖：触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间

//尾部执行
function debounce(callback,time){
    let timeout = null;
    return function(){
        clearTimeout(timeout);
        timeout = setTimeout(()=>{
            callback.apply(this,arguments);
        },time)
    }
}

//头步执行,用变量消除直到最后一个进来
看对应的html

2. 节流: 触发高频事件后n秒内函数只会执行一次,控制函数的执行频率

function throttle(callback,time){
    let mark = false; //是否有函数正在运行
    return function(){
        if(mark) return;
        mark = true;
        setTimeout(()=>{
            callback.apply(this,arguments);
            mark = false;
        },time)
    }
}

### 什么是XSS攻击，如何防范XSS攻击？
1. 跨站脚本攻击
攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，
从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。

XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM
反射型: 通过特定手法:例如邮箱，包含恶意的url，然后让用户去访问，恶意代码就会执行，需要后端配合
存储型: 将代码放到漏洞服务器，访问含有恶意代码的页面就会执行，一般实在网站留言，评论
dom: 客户端脚本程序，动态价差修改页面内容

2. 怎么预防?
+ HttpOnly配置,防止劫取Cookie
+ 输入检查,输入检查一般是检查用户输入的数据中是否包含 <，> 等特殊字符，
如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。
+ 输出检查,可以使用编码或转义的方式来防御 XSS 攻击

### 怎么禁止js读取cookie?怎么只让cookie在https下传输
1. HttpOnly配置,浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie
2. 使用Secure属性,这个属性基本是"自动"的,当前网页是https请求的,所有请求都会加上这个属性,如果请求的cookie中没有这个属性，
浏览器自动忽略请求


### webpack Loader和Plugin的区别
1. Loader 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 
2. Plugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，
在合适的时机通过 Webpack 提供的 API 改变输出结果。
3. Loader 在 module.rules 中配置，作为模块的解析规则，类型为数组。
每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。
4. Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例
参数都通过构造函数传入。

> 手写loader注意项

> 手写plugins注意项
+ compiler 暴露了和 Webpack 整个生命周期相关的钩子
+ compilation 暴露了与模块和依赖有关的粒度更小的事件钩子
+ 插件需要在其原型上绑定apply方法，才能访问 compiler 实例
+ 异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程


### webpack执行流程
初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler
编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理
输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中
