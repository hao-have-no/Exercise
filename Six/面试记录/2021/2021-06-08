### 为什么要用webpack
1. 模块化开发（import，require）
2. 预处理（Less，Sass，ES6，TypeScript……）
3. 文件压缩,将多个文件压缩到一起
4. 合并的过程进行打包,进行文件之间的依赖分析,浏览器运行代码的时候就可以读取这个文件，就知道了各个代码块之间的关联以及如何调用了。
5. 既保留了单个模块的可维护性，又减少了页面的http请求，减少了页面加载时间，从而增加了页面的显示速度，让整个应用的体验更好。

### cdn原理
CDN（Content Delivery Network，内容分发网络）将源站的内容发布到接近用户的网络“边缘”，
用户可以就近获取所需数据，不仅降低了网络的拥塞状况、提高请求的响应速度，也能够减少源站的负载压力。

1. 资源加载过程
> 缓存直接到源站请求数据的过程
+ DNS的迭代解析模式获取域名对应的IP地址并发送HTTP请求的过程:
-->在本机的hosts文件和hosts缓存中查找该域名对应的IP地址；如果本机中没有此信息，
则会到我们的本地DNS进行询问该域名对应的IP地址；如果本地DNS中仍然没有该域名的IP信息时，
则会由本地DNS依次向根DNS、顶级域DNS、权威DNS进行询问，最终本地DNS将IP地址发送给客户端

+ dns记录类型:
--> 最常见的资源记录方式是Internet类记录
--> 由包含4个字段的数据构成：Name、Value、Type、TTL。
其中Name和Value可以理解为一对键值对，
但是其具体含义取决于Type的类型，
TTL记录了该条记录应当从缓存中删除的时间。
--> type主要类型有:
+ Address记录,用于描述目标域名到IP地址的映射关系，
将目标域名与Address记录的Name字段进行匹配，将成功匹配的记录的Value字段的内容（IP地址）输出到DNS回应报文中。'
+ NS记录（Name Server）:
NS记录用于描述目标域名到负责解析该域名的DNS的映射关系，根据目标域名对NS记录的Name字段进行匹配，将成功匹配的记录的Value字段
+ CNAME记录
CNAME记录用于描述目的域名和别名的对应关系

2. 通过cdn获取缓存内容的过程
--> CDN将我们对源站的请求导向了距离用户较近的缓存节点，而非源站
DNS解析域名时新增了一个全局负载均衡系统（GSLB），
GSLB的主要功能是根据用户的本地DNS的IP地址判断用户的位置，
筛选出距离用户较近的本地负载均衡系统（SLB），并将该SLB的IP地址作为结果返回给本地DNS

--> SLB主要负责判断缓存服务器集群中是否包含用户请求的资源数据，如果缓存服务器中存在请求的资源，
则根据缓存服务器集群中节点的健康程度、负载量、连接数等因素筛选出最优的缓存节点，并将HTTP请求重定向到最优的缓存节点上。


--> 以http请求为例
+ 用户发起对"join.qq.com/video.php"的HTTP请求，首先需要通过本地DNS通过"迭代解析"的方式获取域名"join.qq.com"的IP地址
+ 如果本地DNS的缓存中没有该域名的记录，则向根DNS发送DNS查询报文
+ 根DNS发现域名的前缀为"com"，则给出负责解析com的顶级DNS的IP地址
+ 本地DNS向顶级DNS发送DNS查询报文
+ 顶级DNS发现域名的前缀为"qq.com"，在本地记录中查找负责该前缀的权威DNS的IP地址并进行回复
+ 本地DNS向权威DNS发送DNS查询报文
+ 权威DNS查找到一条NAME字段为"join.qq.com"的CNAME记录（由服务提供者配置）
记录的Value字段为"join.qq.cdn.com"；并且还找到另一条NAME字段为"join.qq.cdn.com"的A记录，
该记录的Value字段为GSLB的IP地址
+ GSLB根据本地DNS的IP地址判断用户的大致位置为深圳
筛选出位于华南地区且综合考量最优的SLB的IP地址填入DNS回应报文，作为DNS查询的最终结果
+ 本地DNS向GSLB发送DNS查询报文
+ 本地DNS回复客户端的DNS请求，将上一步的IP地址作为最终结果回复给客户端
+ 客户端根据IP地址向SLB发送HTTP请求
+ SLB综合考虑缓存服务器集群中各个节点的资源限制条件、健康度、负载情况等因素，
筛选出最优的缓存节点后回应客户端的HTTP请求（状态码为302，重定向地址为最优缓存节点的IP地址）；
+ 客户端接收到SLB的HTTP回复后，重定向到该缓存节点上
+ 缓存节点判断请求的资源是否存在、过期，将缓存的资源直接回复给客户端，否则到源站进行数据更新再回复。

CDN中最为常见的工作方式，这种工作方式利用CNAME将域名和目标IP之间进行解耦，
将目标IP的解析权下放到GSLB中，方便实现更多自定义的功能，是一种更加灵活的方式


### ssr


### vue3和vue2区别
1. 渲染更快
> 虚拟DOM重写
+ 组件快速路径+单个调用+子节点类型检测
+ 跳过不必要的条件分支
> 优化slots的生成 
+ vue3中可以单独重新渲染父级和子级 
> 静态树,静态属性提升 
+ Vue 3 的编译器将能够检测到什么是静态的，然后将其提升，从而降低了渲 染成本。 
eg: 经过编译器会生成__static静态属性,生成的render渲染函数中会携带若干个__static(静态属性),vue3打补丁时会跳过这个属性
> 基于Proxy的响应式系统
+ 组件实例初始化的速度提高
+ 使用Proxy节省以前一半的内存开销，加快速度，但是存在低浏览器版本的不兼容 
2. 使用更简单,compositionApi
> 通过摇树优化核心库体积 
> 避免页面反复横跳
3. 跨平台：编译器核心和运行时核心与平台无关，使得Vue更容易与任何平台（Web、 
Android、iOS）一起使用  
4. 独立的响应化模块 
5. 改进的TypeScript支持，编辑器能提供强有力的类型检查和错误及警告 

### typeof,instanceof,Object.prototype.toString.call() 判断对象类型及原理
>> typeof 实现原理
+ 判断类型:number, string, object, boolean, function, undefined, symbol
+ js 在底层是怎么存储数据的类型信息?js 在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息
000：对象  010：浮点数  100：字符串  110：布尔  1：整数  对于undefined和null 有些特殊
null：所有机器码均为0  undefined：用 −2^30 整数来表示

>> instance of 通过原型链进行判断
+ 主要的作用就是判断一个实例是否属于某种类型
+ 左边的变量一直在更新__proto__,直到与右边父类的prototype一致，返回正确，否则为false;

### common.js,,amd-require.js,es6-module,cmd
> 2021-05-20 说明


### tcp/udp及相关问题
> TCP等于和陌生人打电话处理事情，UDP等于发广播
> tcp三次握手,保持一次网络通信交互正常,在不认识我的情况下打我的电话让我来面试
> tcp四次挥手,我找老板办理离职，老板说可以，老板接着给我办理离职，我才可以走

> 在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定Internet上的一台主机。
> 传输层提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制

> 传输控制/网络协议，是面向连接的协议，发送数据前要先建立连接(发送方和接收方的成对的两个之间必须建 立连接)，
TCP提供可靠的服务，也就是说，通过TCP连接传输的数据不会丢失，没有重复，并且按顺序到达
> UDP它是属于TCP/IP协议族中的一种。是无连接的协议，发送数据前不需要建立连接，是没有可靠性的协议

> TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多

> TCP是面向字节流的，UDP是面向报文的;
面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而UDP一个报文只能一次发完

> Http,https,ftp都是运行在tcp协议上的应用层协议
   ntp,dhcp都是运行在udp协议上的应用层协议
   
>> 什么是Socket?
> 两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket

> 服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。
在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了   

http1,http1.1,http2--->2021-05-06

### performance:详情见性能分析pdf
1. 性能分析
+ chrome dev tools:分析页面性能

2. 错误捕获
+ try-catch
+ window.error监听错误:可以捕获常见语法、同步、异步错误等错误；在所有JS脚本之前被执行,容易被覆盖
+ 异步的话promise中的error或者reject
+ window.addEventListener：监听网络错误-->window.addEventListener('error', (error) => {
+ 

3. 数据上报
+ 常见的是通过加载资源的方式:javascript或者css/图片,将数据包发送到服务器
var img = new window.Image();
img.src = "".concat(url).concat(encodeURIComponent(JSON.stringFy(logInfo)));

### element和node的区别
element 继承node 

### vue-router模式
1. hash
> hash:通过url中#(锚点)及后面的配置完成导航
> 通过监听hashchange来完成路由的变化监听
2. history
> 提供了 pushState 和 replaceState 两个方法
> 改变 URL 的 path 部分不会引起页面刷新
> 提供popstate事件进行监听,没有hash方便
> 地址变动的话，会请求新的资源，这时候需要nginx做一个try_file的适配，将页面资源定向为首页

### get和post区别
1. GET产生一个TCP数据包;POST产生两个TCP数据包
2. GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);
POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。
3. 参数携带的大小问题，get在url上挂在参数，post是在request body上挂载
