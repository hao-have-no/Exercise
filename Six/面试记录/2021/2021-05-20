### 为什么要使用模块化？常见规范哪几种？各有什么特点
1. 解决命名冲突；方便管理依赖；方便管理代码，增加代码的重用性；提高代码的可读性
2. 常见规范分为四种 common.js cmd amd es6模块
> common.js
+ node.js的主要实践者
+ 用同步的方式加载模块
+ module.exports导出的是一个值的拷贝
+ 先加载整个模块，生成一个对象，然后再从这个对象上面读取方法
> cmd
+ 依赖就近、延迟执行,等到需要用这个依赖的时候再引入这个依赖
> amd
+ 采用异步方式加载模块，模块的加载不影响它后面语句的运行
+ 用require.config()指定引用路径等，用define()定义模块，用require()加载模块
+ 推崇依赖前置、提前执行
+ 在申明依赖的模块时会在第一之间加载并执行模块内的代码
> es6模块
+ es6 导出的是值的引用,一个引用的值改变了，另外一处也会改变

### 三种以上的前端性能优化
1. csdn托管大的静态资源
2. css使用时，尽量避免使用能引发回流操作的语法
3. 大数据的列表或者图片使用懒加载或者虚拟列表
4. 缓存优化
5. 图片编码优化，尽量使用svg和字体图标

### 客户端缓存有几种方式？浏览器出现form disk,form memory的策略是什么
1. cookie sessionStorage localStorage

2. form disk
资源是从磁盘当中取出的，也是在已经在之前的某个时间加载过该资源，不
会请求服务器但是此资源不会随着该页面的关闭而释放掉，
因为是存在硬盘当中的，下次打开仍会from disk cache
3. form memory
资源是直接从内存中拿到的，不会请求服务器一般已经加载过该资源
且缓存在了内存当中，当关闭该页面时，此资源就被内存释放掉了，
再次重新打开相同页面时不会出现from memory cache的情况
